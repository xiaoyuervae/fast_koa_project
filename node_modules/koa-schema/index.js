
/**
 * Module dependencies.
 */

var debug = require('debug')('koa-schema');
var assert = require('assert');

module.exports = Schema;

function Schema(obj) {
  this.schema = obj;
}

Schema.prototype.properties = function(){
  return Object.keys(this.schema);
};


Schema.prototype.valid = function(doc){
  assert(doc, 'document required');

  this.errors = [];
  var schema = this.schema;
  var self = this;

  Object.keys(schema).forEach(function(name){
    var prop = schema[name];
    prop.name = name;
    self.validateProperty(prop, doc);
  });

  Object.keys(doc).forEach(function(key){
    if (!schema[key]) {
      self.error({ name: key }, 'is an invalid property');
    }
  });

  return 0 == this.errors.length;
};

Schema.prototype.validate = function(doc){
  if (!this.valid(doc)) {
    throw this.errors[0];
  }
};

Schema.prototype.validateProperty = function(prop, doc){
  var val = doc[prop.name];

  // optional
  if (!prop.required && val == null) return;

  // required
  if (val == null) return this.error(prop, 'is required');

  // string type
  if (prop.type == 'string' && typeof val != 'string') {
    return this.error(prop, 'must be a string');
  }

  // number type
  if (prop.type == 'number' && typeof val != 'number') {
    return this.error(prop, 'must be a number');
  }

  // array type
  if (prop.type == 'array' && !Array.isArray(val)) {
    return this.error(prop, 'must be an array');
  }

  // object type
  if (prop.type == 'object' && typeof val != 'object') {
    return this.error(prop, 'must be an object');
  }
};

Schema.prototype.error = function(prop, msg){
  var err = new Error(prop.name + ' ' + msg);
  err.type = 'validation';
  err.expose = true;
  err.status = 400;
  this.errors.push(err);
};