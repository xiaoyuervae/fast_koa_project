
var assert = require('assert');
var Schema = require('..');

var user = new Schema({
  name: {
    type: 'string',
    required: true
  }
});

describe('Schema#properties()', function(){
  it('should return the property names defined', function(){
    user.properties().should.eql(['name']);
  })
})

describe('Schema#valid(doc)', function(){
  describe('when valid', function(){
    it('should return true', function(){
      var ret = user.valid({ name: 'tobi' });
      assert(true === ret);
    })
  })

  describe('when invalid', function(){
    it('should return false', function(){
      var ret = user.valid({});
      assert(false === ret);
    })

    it('should populate .errors', function(){
      var ret = user.valid({});

      assert(false === ret);
      assert(1 == user.errors.length);

      user.errors[0].message.should.equal('name is required');
      user.errors[0].expose.should.be.true;
      user.errors[0].type.should.equal('validation');
    })
  })
})

describe('Schema#validate(doc)', function(){
  describe('when valid', function(){
    it('should return', function(){
      user.validate({ name: 'tobi' });
    })
  })

  describe('when invalid', function(){
    it('should throw', function(done){
      try {
        user.validate({});
      } catch (err) {
        err.message.should.equal('name is required');
        done();
      }
    })
  })
})

describe('.type', function(){
  it('should validate strings', function(done){
    user.validate({ name: 'tobi' });

    try {
      user.validate({ name: 5 });
    } catch (err) {
      err.message.should.equal('name must be a string');
      done();
    }
  })

  it('should validate numbers', function(done){
    var user = new Schema({ name: { type: 'number' } });

    user.validate({ name: 5 });

    try {
      user.validate({ name: 'tobi' });
    } catch (err) {
      err.message.should.equal('name must be a number');
      done();
    }
  })

  it('should validate objects', function(done){
    var user = new Schema({ name: { type: 'object' } });

    user.validate({ name: { foo: 'bar' } });

    try {
      user.validate({ name: 'tobi' });
    } catch (err) {
      err.message.should.equal('name must be an object');
      done();
    }
  })

  it('should validate array', function(done){
    var user = new Schema({ name: { type: 'array' } });

    user.validate({ name: [] });

    try {
      user.validate({ name: 'tobi' });
    } catch (err) {
      err.message.should.equal('name must be an array');
      done();
    }
  })
})